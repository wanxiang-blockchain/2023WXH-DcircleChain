/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function aes_encrypt(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function aes_decrypt(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function parity_genera(a: number, b: number): number;
export function parity_che(a: number, b: number, c: number): number;
export function get_eip_1040_address(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function new_keccak256_cid(a: number, b: number, c: number): void;
export function new_keccak(a: number, b: number, c: number): void;
export function message_encode(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function message_decode(a: number, b: number, c: number, d: number, e: number): void;
export function sign_for_web(a: number, b: number, c: number, d: number, e: number): void;
export function recoverPublicKey(a: number, b: number, c: number, d: number, e: number): void;
export function recover_address_from_public_key(a: number, b: number, c: number): void;
export function sss_y0(a: number, b: number, c: number, d: number, e: number): void;
export function sss_y1(a: number, b: number, c: number, d: number, e: number): void;
export function get_aes_key(a: number): void;
export function greet(a: number, b: number): void;
export function return_string(a: number): void;
export function test_type_string(a: number, b: number, c: number): void;
export function test_type_binary(a: number, b: number, c: number): void;
export function base64_decode(a: number, b: number, c: number): void;
export function hex_decode(a: number, b: number, c: number): void;
export function hex_encode(a: number, b: number, c: number): void;
export function base64_encode(a: number, b: number, c: number): void;
export function base64_safe_encode(a: number, b: number, c: number): void;
export function base64_safe_decode(a: number, b: number, c: number): void;
export function encodeRlp(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function encodeRlpToHex(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function decodeRlp(a: number, b: number, c: number): void;
export function decodeRlpWithHex(a: number, b: number, c: number): void;
export function validateMnemonic(a: number, b: number): number;
export function wordInWordList(a: number, b: number): number;
export function test1_include(a: number): void;
export function test_type_integer(a: number): number;
export function rustsecp256k1_v0_4_1_context_create(a: number): number;
export function rustsecp256k1_v0_4_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_4_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_4_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
