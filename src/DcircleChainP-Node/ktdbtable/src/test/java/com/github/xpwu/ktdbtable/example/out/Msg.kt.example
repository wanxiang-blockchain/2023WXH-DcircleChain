@file:JvmName("MsgTable")
package com.github.xpwu.ktdbtable.example

// This file is generated by ktdbtable_processor. DO NOT edit it!

import android.content.ContentValues
import com.github.xpwu.ktdbtable.*

fun Msg.Companion.TableNameIn(db: DB<*>): String {
  val name = db.Name(Msg::class) ?: tableName

  if (!db.Exist(name)) {
    Msg.CreateTableIn(db)
  } else {
    db.OnOpenAndUpgrade(name, Msg::class)
  }

  return name
}

val Msg.Companion.Id
  get() = Column("id")

val Msg.Companion.Name
  get() = Column("name")



fun Msg.Companion.AllColumns(): List<Column> {
  return listOf(
    Id, Name, 
  )
}

fun Msg.Companion.Binding(): TableBinding {
  return MakeBinding(Msg::class, tableName)
}

fun Msg.Companion.TableInfo(): TableInfo {
  return TableInfo(tableVersion, Msg.Migrators(), 
    Msg.allIndex(), 
    mapOf(  "id" to "ALTER TABLE msg ADD COLUMN id   ",
      "name" to "ALTER TABLE msg ADD COLUMN name   ",
    )
  )
}



fun Msg.Companion.Initializer(): Collection<Msg> {
  return emptyList()
}

typealias IndexName = String
// "CREATE INDEX IF NOT EXISTS ..."
typealias IndexSQL = String

private fun Msg.Companion.allIndex(): Map<IndexName, IndexSQL> {
  return mapOf()
}

fun Msg.ToContentValues(columns: List<Column> = Msg.AllColumns()): ContentValues {
  val cv = ContentValues(columns.size)
  for (column in columns) {
    when(column) {
      Msg.Id -> cv.put(column.toString(), this.Id)
      Msg.Name -> cv.put(column.toString(), this.Name)
  
      else -> {
        throw IllegalArgumentException("Illegal column $column for Msg")
      }
    }
  }

  return cv
}

private fun Msg.Companion.CreateTableIn(db: DB<*>) {
  val tableName = db.Name(Msg::class) ?: tableName
  db.OnlyForInitTable {
    it.BeginTransaction()
    try {
      it.ExecSQL("CREATE TABLE IF NOT EXISTS msg(id   , name   , PRIMARY KEY(name MULTI_DESC))")
      for ((_, index) in Msg.allIndex()) {
        it.ExecSQL(index)
      }
      db.SetVersion(tableName, tableVersion)
      for (init in Msg.Initializer()) {
        it.Replace(tableName, init.ToContentValues())
      }
      it.SetTransactionSuccessful()
    } finally {
      it.EndTransaction()
    }
  }
}

private const val tableName = "msg"
private const val tableVersion = 0
