
package db

// ---- auto generated by builder.go, NOT modify this file ----

import (
  field "github.com/xpwu/go-db-mongo/mongodb/field"
)

type BlockDocument0FieldUpdaterF struct {
  *baseBlockDocument0Field
  *field.StructUpdaterF
}

func (s *BlockDocument0FieldUpdaterF) FullName() string {
  return s.name
}

type BlockDocument0FieldFilterF struct {
  *baseBlockDocument0Field
  *field.StructFilterF
}

func (s *BlockDocument0FieldFilterF) FullName() string {
  return s.name
}

type BlockDocument0Field struct {
  *baseBlockDocument0Field
  BlockDocument0FieldUpdaterF  *BlockDocument0FieldUpdaterF
  BlockDocument0FieldFilterF   *BlockDocument0FieldFilterF
}

func NewBlockDocument0Field(fName string) *BlockDocument0Field {
  base := &baseBlockDocument0Field{fName}
  // 没有name时，不能做updater与filter操作，比如最顶层的Struct
  if fName == "" {
    return &BlockDocument0Field {baseBlockDocument0Field:base}
  }
  up := &BlockDocument0FieldUpdaterF{base, field.NewStructUpdaterF(fName)}
  fl := &BlockDocument0FieldFilterF{base, field.NewStructFilterF(fName)}

  return &BlockDocument0Field {base, up, fl}
}

// 对应于 bson struct 中的 inline 修饰符
func NewBlockDocument0FieldInline(fName string) *BlockDocument0Field {
  return &BlockDocument0Field {baseBlockDocument0Field: &baseBlockDocument0Field{fName}}
}

func (s *BlockDocument0Field) FullName() string {
  return s.name
}

type baseBlockDocument0Field struct {
  name      string
}

func (s *baseBlockDocument0Field) BlockHash() *field.String0F {
  n := field.StructNext(s.name, "_id")
  return field.NewString0F(n)
}

func (s *baseBlockDocument0Field) PreviousHash() *field.String0F {
  n := field.StructNext(s.name, "PreviousHash")
  return field.NewString0F(n)
}

func (s *baseBlockDocument0Field) Nonce() *field.Int640F {
  n := field.StructNext(s.name, "Nonce")
  return field.NewInt640F(n)
}

func (s *baseBlockDocument0Field) Timestamp() *field.Uint640F {
  n := field.StructNext(s.name, "Timestamp")
  return field.NewUint640F(n)
}

func (s *baseBlockDocument0Field) BlockNumber() *field.Int640F {
  n := field.StructNext(s.name, "BlockNumber")
  return field.NewInt640F(n)
}

func (s *baseBlockDocument0Field) GasLimit() *field.Int640F {
  n := field.StructNext(s.name, "GasLimit")
  return field.NewInt640F(n)
}

func (s *baseBlockDocument0Field) GasUsed() *field.Int640F {
  n := field.StructNext(s.name, "GasUsed")
  return field.NewInt640F(n)
}

func (s *baseBlockDocument0Field) TransactionHashes() *field.String1Field {
  n := field.StructNext(s.name, "TransactionHashes")
  return field.NewString1Field(n)
}

func (s *baseBlockDocument0Field) ContentHashes() *field.String1Field {
  n := field.StructNext(s.name, "ContentHashes")
  return field.NewString1Field(n)
}

func (s *baseBlockDocument0Field) Difficulty() *field.Int640F {
  n := field.StructNext(s.name, "Difficulty")
  return field.NewInt640F(n)
}

