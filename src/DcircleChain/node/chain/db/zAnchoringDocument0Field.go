
package db

// ---- auto generated by builder.go, NOT modify this file ----

import (
  field "github.com/xpwu/go-db-mongo/mongodb/field"
)

type AnchoringDocument0FieldUpdaterF struct {
  *baseAnchoringDocument0Field
  *field.StructUpdaterF
}

func (s *AnchoringDocument0FieldUpdaterF) FullName() string {
  return s.name
}

type AnchoringDocument0FieldFilterF struct {
  *baseAnchoringDocument0Field
  *field.StructFilterF
}

func (s *AnchoringDocument0FieldFilterF) FullName() string {
  return s.name
}

type AnchoringDocument0Field struct {
  *baseAnchoringDocument0Field
  AnchoringDocument0FieldUpdaterF  *AnchoringDocument0FieldUpdaterF
  AnchoringDocument0FieldFilterF   *AnchoringDocument0FieldFilterF
}

func NewAnchoringDocument0Field(fName string) *AnchoringDocument0Field {
  base := &baseAnchoringDocument0Field{fName}
  // 没有name时，不能做updater与filter操作，比如最顶层的Struct
  if fName == "" {
    return &AnchoringDocument0Field {baseAnchoringDocument0Field:base}
  }
  up := &AnchoringDocument0FieldUpdaterF{base, field.NewStructUpdaterF(fName)}
  fl := &AnchoringDocument0FieldFilterF{base, field.NewStructFilterF(fName)}

  return &AnchoringDocument0Field {base, up, fl}
}

// 对应于 bson struct 中的 inline 修饰符
func NewAnchoringDocument0FieldInline(fName string) *AnchoringDocument0Field {
  return &AnchoringDocument0Field {baseAnchoringDocument0Field: &baseAnchoringDocument0Field{fName}}
}

func (s *AnchoringDocument0Field) FullName() string {
  return s.name
}

type baseAnchoringDocument0Field struct {
  name      string
}

func (s *baseAnchoringDocument0Field) RootHash() *field.String0F {
  n := field.StructNext(s.name, "RootHash")
  return field.NewString0F(n)
}

func (s *baseAnchoringDocument0Field) PreRootHash() *field.String0F {
  n := field.StructNext(s.name, "PreRootHash")
  return field.NewString0F(n)
}

func (s *baseAnchoringDocument0Field) Nonce() *field.Int640F {
  n := field.StructNext(s.name, "Nonce")
  return field.NewInt640F(n)
}

func (s *baseAnchoringDocument0Field) AnchoringNumber() *field.Int640F {
  n := field.StructNext(s.name, "AnchoringNumber")
  return field.NewInt640F(n)
}

func (s *baseAnchoringDocument0Field) Timestamp() *field.Uint640F {
  n := field.StructNext(s.name, "Timestamp")
  return field.NewUint640F(n)
}

func (s *baseAnchoringDocument0Field) BlockHashTree() *field.String1Field {
  n := field.StructNext(s.name, "BlockHashTree")
  return field.NewString1Field(n)
}

