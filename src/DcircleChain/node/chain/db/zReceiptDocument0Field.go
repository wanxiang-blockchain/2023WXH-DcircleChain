
package db

// ---- auto generated by builder.go, NOT modify this file ----

import (
  field "github.com/xpwu/go-db-mongo/mongodb/field"
)

type ReceiptDocument0FieldUpdaterF struct {
  *baseReceiptDocument0Field
  *field.StructUpdaterF
}

func (s *ReceiptDocument0FieldUpdaterF) FullName() string {
  return s.name
}

type ReceiptDocument0FieldFilterF struct {
  *baseReceiptDocument0Field
  *field.StructFilterF
}

func (s *ReceiptDocument0FieldFilterF) FullName() string {
  return s.name
}

type ReceiptDocument0Field struct {
  *baseReceiptDocument0Field
  ReceiptDocument0FieldUpdaterF  *ReceiptDocument0FieldUpdaterF
  ReceiptDocument0FieldFilterF   *ReceiptDocument0FieldFilterF
}

func NewReceiptDocument0Field(fName string) *ReceiptDocument0Field {
  base := &baseReceiptDocument0Field{fName}
  // 没有name时，不能做updater与filter操作，比如最顶层的Struct
  if fName == "" {
    return &ReceiptDocument0Field {baseReceiptDocument0Field:base}
  }
  up := &ReceiptDocument0FieldUpdaterF{base, field.NewStructUpdaterF(fName)}
  fl := &ReceiptDocument0FieldFilterF{base, field.NewStructFilterF(fName)}

  return &ReceiptDocument0Field {base, up, fl}
}

// 对应于 bson struct 中的 inline 修饰符
func NewReceiptDocument0FieldInline(fName string) *ReceiptDocument0Field {
  return &ReceiptDocument0Field {baseReceiptDocument0Field: &baseReceiptDocument0Field{fName}}
}

func (s *ReceiptDocument0Field) FullName() string {
  return s.name
}

type baseReceiptDocument0Field struct {
  name      string
}

func (s *baseReceiptDocument0Field) TransactionHash() *field.String0F {
  n := field.StructNext(s.name, "_id")
  return field.NewString0F(n)
}

func (s *baseReceiptDocument0Field) BlockHash() *field.String0F {
  n := field.StructNext(s.name, "BlockHash")
  return field.NewString0F(n)
}

func (s *baseReceiptDocument0Field) BlockNumber() *field.Int640F {
  n := field.StructNext(s.name, "BlockNumber")
  return field.NewInt640F(n)
}

func (s *baseReceiptDocument0Field) From() *field.String0F {
  n := field.StructNext(s.name, "From")
  return field.NewString0F(n)
}

func (s *baseReceiptDocument0Field) To() *field.String0F {
  n := field.StructNext(s.name, "To")
  return field.NewString0F(n)
}

func (s *baseReceiptDocument0Field) GasUsed() *field.Float640F {
  n := field.StructNext(s.name, "GasUsed")
  return field.NewFloat640F(n)
}

func (s *baseReceiptDocument0Field) Status() *field.String0F {
  n := field.StructNext(s.name, "Status")
  return field.NewString0F(n)
}

func (s *baseReceiptDocument0Field) Timestamp() *field.Uint640F {
  n := field.StructNext(s.name, "Timestamp")
  return field.NewUint640F(n)
}

