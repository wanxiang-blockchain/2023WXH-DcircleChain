
package db

// ---- auto generated by builder.go, NOT modify this file ----

import (
  field "github.com/xpwu/go-db-mongo/mongodb/field"
)

type NonceDocument0FieldUpdaterF struct {
  *baseNonceDocument0Field
  *field.StructUpdaterF
}

func (s *NonceDocument0FieldUpdaterF) FullName() string {
  return s.name
}

type NonceDocument0FieldFilterF struct {
  *baseNonceDocument0Field
  *field.StructFilterF
}

func (s *NonceDocument0FieldFilterF) FullName() string {
  return s.name
}

type NonceDocument0Field struct {
  *baseNonceDocument0Field
  NonceDocument0FieldUpdaterF  *NonceDocument0FieldUpdaterF
  NonceDocument0FieldFilterF   *NonceDocument0FieldFilterF
}

func NewNonceDocument0Field(fName string) *NonceDocument0Field {
  base := &baseNonceDocument0Field{fName}
  // 没有name时，不能做updater与filter操作，比如最顶层的Struct
  if fName == "" {
    return &NonceDocument0Field {baseNonceDocument0Field:base}
  }
  up := &NonceDocument0FieldUpdaterF{base, field.NewStructUpdaterF(fName)}
  fl := &NonceDocument0FieldFilterF{base, field.NewStructFilterF(fName)}

  return &NonceDocument0Field {base, up, fl}
}

// 对应于 bson struct 中的 inline 修饰符
func NewNonceDocument0FieldInline(fName string) *NonceDocument0Field {
  return &NonceDocument0Field {baseNonceDocument0Field: &baseNonceDocument0Field{fName}}
}

func (s *NonceDocument0Field) FullName() string {
  return s.name
}

type baseNonceDocument0Field struct {
  name      string
}

func (s *baseNonceDocument0Field) UserID() *field.String0F {
  n := field.StructNext(s.name, "_id")
  return field.NewString0F(n)
}

func (s *baseNonceDocument0Field) Nonce() *field.Uint640F {
  n := field.StructNext(s.name, "Nonce")
  return field.NewUint640F(n)
}

