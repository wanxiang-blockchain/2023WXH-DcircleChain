
package db

// ---- auto generated by builder.go, NOT modify this file ----

import (
  field "github.com/xpwu/go-db-mongo/mongodb/field"
)

type TransactionDocument0FieldUpdaterF struct {
  *baseTransactionDocument0Field
  *field.StructUpdaterF
}

func (s *TransactionDocument0FieldUpdaterF) FullName() string {
  return s.name
}

type TransactionDocument0FieldFilterF struct {
  *baseTransactionDocument0Field
  *field.StructFilterF
}

func (s *TransactionDocument0FieldFilterF) FullName() string {
  return s.name
}

type TransactionDocument0Field struct {
  *baseTransactionDocument0Field
  TransactionDocument0FieldUpdaterF  *TransactionDocument0FieldUpdaterF
  TransactionDocument0FieldFilterF   *TransactionDocument0FieldFilterF
}

func NewTransactionDocument0Field(fName string) *TransactionDocument0Field {
  base := &baseTransactionDocument0Field{fName}
  // 没有name时，不能做updater与filter操作，比如最顶层的Struct
  if fName == "" {
    return &TransactionDocument0Field {baseTransactionDocument0Field:base}
  }
  up := &TransactionDocument0FieldUpdaterF{base, field.NewStructUpdaterF(fName)}
  fl := &TransactionDocument0FieldFilterF{base, field.NewStructFilterF(fName)}

  return &TransactionDocument0Field {base, up, fl}
}

// 对应于 bson struct 中的 inline 修饰符
func NewTransactionDocument0FieldInline(fName string) *TransactionDocument0Field {
  return &TransactionDocument0Field {baseTransactionDocument0Field: &baseTransactionDocument0Field{fName}}
}

func (s *TransactionDocument0Field) FullName() string {
  return s.name
}

type baseTransactionDocument0Field struct {
  name      string
}

func (s *baseTransactionDocument0Field) TxnID() *field.String0F {
  n := field.StructNext(s.name, "_id")
  return field.NewString0F(n)
}

func (s *baseTransactionDocument0Field) Nonce() *field.Uint640F {
  n := field.StructNext(s.name, "Nonce")
  return field.NewUint640F(n)
}

func (s *baseTransactionDocument0Field) BlockHash() *field.String0F {
  n := field.StructNext(s.name, "BlockHash")
  return field.NewString0F(n)
}

func (s *baseTransactionDocument0Field) From() *field.String0F {
  n := field.StructNext(s.name, "From")
  return field.NewString0F(n)
}

func (s *baseTransactionDocument0Field) To() *field.String0F {
  n := field.StructNext(s.name, "To")
  return field.NewString0F(n)
}

func (s *baseTransactionDocument0Field) Gas() *field.Int640F {
  n := field.StructNext(s.name, "Gas")
  return field.NewInt640F(n)
}

func (s *baseTransactionDocument0Field) GasPrice() *field.Int640F {
  n := field.StructNext(s.name, "GasPrice")
  return field.NewInt640F(n)
}

func (s *baseTransactionDocument0Field) GasFees() *field.Int640F {
  n := field.StructNext(s.name, "GasFees")
  return field.NewInt640F(n)
}

func (s *baseTransactionDocument0Field) GasLimit() *field.Int640F {
  n := field.StructNext(s.name, "GasLimit")
  return field.NewInt640F(n)
}

func (s *baseTransactionDocument0Field) Value() *field.Int640F {
  n := field.StructNext(s.name, "Value")
  return field.NewInt640F(n)
}

func (s *baseTransactionDocument0Field) TransactionFee() *field.Int640F {
  n := field.StructNext(s.name, "TransactionFee")
  return field.NewInt640F(n)
}

func (s *baseTransactionDocument0Field) TxnType() *field.Uint640F {
  n := field.StructNext(s.name, "TxnType")
  return field.NewUint640F(n)
}

func (s *baseTransactionDocument0Field) Data() *field.Uint81Field {
  n := field.StructNext(s.name, "Data")
  return field.NewUint81Field(n)
}

func (s *baseTransactionDocument0Field) Sign() *field.String0F {
  n := field.StructNext(s.name, "Sign")
  return field.NewString0F(n)
}

func (s *baseTransactionDocument0Field) Timestamp() *field.Uint640F {
  n := field.StructNext(s.name, "Timestamp")
  return field.NewUint640F(n)
}

